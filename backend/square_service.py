"""\nSquare Appointments API Integration Service - Enhanced Version\nHandles booking creation, availability checking, and provides centralized data from Square\n"""\n\nimport os\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional\nimport requests\nfrom dotenv import load_dotenv\nimport pytz\nimport uuid\n\nload_dotenv()\n\nlogger = logging.getLogger(__name__)\n\nclass SquareService:\n    """Service for interacting with Square Appointments API"""\n    \n    def __init__(self):\n        self.access_token = os.getenv('SQUARE_ACCESS_TOKEN')\n        self.location_id = os.getenv('SQUARE_LOCATION_ID')\n        self.base_url = 'https://connect.squareup.com/v2'\n        \n        # Use Eastern timezone for the barbershop\n        self.local_tz = pytz.timezone('America/New_York')\n        \n        if not self.access_token:\n            logger.warning(\"SQUARE_ACCESS_TOKEN not found in environment variables\")\n        if not self.location_id:\n            logger.warning(\"SQUARE_LOCATION_ID not found in environment variables\")\n        \n        self.headers = {\n            'Square-Version': '2024-10-17',\n            'Authorization': f'Bearer {self.access_token}',\n            'Content-Type': 'application/json'\n        }\n    \n    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict:\n        """Make authenticated request to Square API"""\n        url = f\"{self.base_url}{endpoint}\"\n        \n        try:\n            if method == 'GET':\n                response = requests.get(url, headers=self.headers, params=data)\n            elif method == 'POST':\n                response = requests.post(url, headers=self.headers, json=data)\n            elif method == 'PUT':\n                response = requests.put(url, headers=self.headers, json=data)\n            elif method == 'DELETE':\n                response = requests.delete(url, headers=self.headers)\n            else:\n                raise ValueError(f\"Unsupported HTTP method: {method}\")\n            \n            response.raise_for_status()\n            return response.json()\n            \n        except requests.exceptions.HTTPError as e:\n            # Log the full error response for debugging\n            error_details = \"No response body\"\n            try:\n                error_details = e.response.json()\n                logger.error(f\"Square API Error Details: {error_details}\")\n            except:\n                error_details = e.response.text\n                logger.error(f\"Square API Error Text: {error_details}\")\n            \n            logger.error(f\"Square API HTTP Error: {e.response.status_code}\")\n            raise Exception(f\"Square API Error: {e.response.status_code} - {error_details}\")\n        except Exception as e:\n            logger.error(f\"Square API Error: {str(e)}\")\n            raise\n\n    def create_or_find_customer(self, email: str, phone: str, \n                                first_name: str, last_name: str) -> Dict:\n        """Create a new customer or find existing one"""\n        try:\n            # Search for existing customer by email\n            search_response = self._make_request('POST', '/customers/search', {\n                'query': {\n                    'filter': {\n                        'email_address': {\n                            'exact': email\n                        }\n                    }\n                }\n            })\n            \n            customers = search_response.get('customers', [])\n            if customers:\n                return customers[0]\n            \n            # Create new customer if not found - FIXED: No wrapper!\n            customer_data = {\n                'idempotency_key': str(uuid.uuid4()),\n                'given_name': first_name,\n                'family_name': last_name,\n                'email_address': email,\n                'phone_number': phone\n            }\n            \n            create_response = self._make_request('POST', '/customers', customer_data)\n            \n            return create_response.get('customer', {})\n            \n        except Exception as e:\n            logger.error(f\"Error creating/finding customer: {str(e)}\")\n            raise\n\n\n# Singleton instance\nsquare_service = SquareService()\n